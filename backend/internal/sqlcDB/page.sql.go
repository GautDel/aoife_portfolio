// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: page.sql

package queries

import (
	"context"

	"github.com/google/uuid"
)

const createPage = `-- name: CreatePage :one
INSERT INTO pages (
  id,
  name,
  item_order,
  item_show
) VALUES (
  $1, $2, $3, $4 
)
RETURNING id, name, item_show, item_order, tab_color
`

type CreatePageParams struct {
	ID        uuid.UUID
	Name      string
	ItemOrder int32
	ItemShow  bool
}

func (q *Queries) CreatePage(ctx context.Context, arg CreatePageParams) (Page, error) {
	row := q.db.QueryRow(ctx, createPage,
		arg.ID,
		arg.Name,
		arg.ItemOrder,
		arg.ItemShow,
	)
	var i Page
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ItemShow,
		&i.ItemOrder,
		&i.TabColor,
	)
	return i, err
}

const deletePage = `-- name: DeletePage :one
DELETE FROM pages 
WHERE name = $1
RETURNING name
`

func (q *Queries) DeletePage(ctx context.Context, name string) (string, error) {
	row := q.db.QueryRow(ctx, deletePage, name)
	err := row.Scan(&name)
	return name, err
}

const getPages = `-- name: GetPages :many
SELECT id, name, item_show, item_order, tab_color FROM pages
`

func (q *Queries) GetPages(ctx context.Context) ([]Page, error) {
	rows, err := q.db.Query(ctx, getPages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Page
	for rows.Next() {
		var i Page
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ItemShow,
			&i.ItemOrder,
			&i.TabColor,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePage = `-- name: UpdatePage :one
UPDATE pages
SET name = $1, item_order = $2, item_show = $3, tab_color = $4
WHERE name = $5
RETURNING name
`

type UpdatePageParams struct {
	Name      string
	ItemOrder int32
	ItemShow  bool
	TabColor  string
	Name_2    string
}

func (q *Queries) UpdatePage(ctx context.Context, arg UpdatePageParams) (string, error) {
	row := q.db.QueryRow(ctx, updatePage,
		arg.Name,
		arg.ItemOrder,
		arg.ItemShow,
		arg.TabColor,
		arg.Name_2,
	)
	var name string
	err := row.Scan(&name)
	return name, err
}
