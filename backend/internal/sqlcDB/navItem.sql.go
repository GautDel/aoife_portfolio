// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: navItem.sql

package queries

import (
	"context"
)

const createNavItem = `-- name: CreateNavItem :one
INSERT INTO nav_item (
  name,
  item_order,
  item_show
) VALUES (
  $1, $2, $3 
)
RETURNING id, name, item_show, item_order
`

type CreateNavItemParams struct {
	Name      string
	ItemOrder int32
	ItemShow  bool
}

func (q *Queries) CreateNavItem(ctx context.Context, arg CreateNavItemParams) (NavItem, error) {
	row := q.db.QueryRow(ctx, createNavItem, arg.Name, arg.ItemOrder, arg.ItemShow)
	var i NavItem
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ItemShow,
		&i.ItemOrder,
	)
	return i, err
}

const deleteNavItem = `-- name: DeleteNavItem :exec
DELETE FROM nav_item 
WHERE name = $1
`

func (q *Queries) DeleteNavItem(ctx context.Context, name string) error {
	_, err := q.db.Exec(ctx, deleteNavItem, name)
	return err
}

const getNavItems = `-- name: GetNavItems :many
SELECT id, name, item_show, item_order FROM nav_item
`

func (q *Queries) GetNavItems(ctx context.Context) ([]NavItem, error) {
	rows, err := q.db.Query(ctx, getNavItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NavItem
	for rows.Next() {
		var i NavItem
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ItemShow,
			&i.ItemOrder,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateNavItem = `-- name: UpdateNavItem :exec
UPDATE nav_item
SET name = $1, item_order = $2, item_show = $3
WHERE name = $4
`

type UpdateNavItemParams struct {
	Name      string
	ItemOrder int32
	ItemShow  bool
	Name_2    string
}

func (q *Queries) UpdateNavItem(ctx context.Context, arg UpdateNavItemParams) error {
	_, err := q.db.Exec(ctx, updateNavItem,
		arg.Name,
		arg.ItemOrder,
		arg.ItemShow,
		arg.Name_2,
	)
	return err
}
